<!-- livebook:{"persist_outputs":true} -->

# Day 06

## Intro

[https://adventofcode.com/2022/day/6](https://adventofcode.com/2022/day/6)

## Input

```elixir
input = File.read!("input06.txt")
```

<!-- livebook:{"output":true} -->

```
"rhghwwsmsgmgsmmmlzljllrddvsvhvhhnvvrcccwhhvgghchwhvwvcvrrrgtgrgdggfdgffshsllvvslsppglgvgwgswwcbcwbwrrbjbwjjtgjjdzdfdhfddrmmhqhpqhhqghhzssqzqccbwwffzvzffvtftddrbrtrrcjrrmmbmrrrlrppplmplmppfzpfpvpqvpqqdndpndnmnwmwjmwmwbbrhhmzmffwfqwfqwffppvfpvffnwwwwcbwbhbccvmmplmplmmlmplpprbpbllmhlhzhffngfnntrrsrprrvlllvjvmjvvppsrrfnrfnrfrfwrffrsfrflfltfllpfprrthhhnhqnnfwwcttvzzddqsddwpddnrnttvjttjjdjvdjvjnvnrvvchhschhlffjggtqgqnnvrnrsnrsnsvspsnncppvwvvtmmcqmcmscmsmwmvmpvvlqqmbqqlwwtgtztgttpjjbfjjzhzthhzssffwqqdmdcdlclrclrccbmmqjqmqcmmnnsvnntpphhdpdhhtbtdtffhzfhhpwhppwbppfspphdhggzqgzzffdsdfsszcscpscsqcssffhjhnhhlqqdbqqdmdsmddrfddndldgglvglvlggqlggjngjnnbffthhjbjpjnjmnmgmqqbjqjzjqzzzjffwttcnnzffmllcncmnnthnncttpgpnnjdjfftmmvqmqsqggfrfjjqbjbvvshvhphfhhljlfjjvcclzclctcmmfwfvwfvwwjvwvjjplpbpqqdvqqbhbdbnnsndssgffgsglssmfmjjfrjfrfttljldjdffjjdnjjlbbnrntrtfrttmhhndnsdsffgqqrpplvvfwvfvsfszzfzhfzzlttlctllrzrggvwvhhgnnlmnlmlpppdldqqdpdlplrpppjspspzzhphccgjjpmmwvwbwssnpssrzrwrhhmzhmhsmhmttrqrvqvcclggptpjpzpccltctppflfjffrtrjrhjhffhjfjbfjfqfqzffdtthwwjwzjzggsgzgqqjdqjddvgvsvnnqwqgwgtttfvfrfwrfwfwmwmqwmmmbzmzvzfvfrfvvgvtvptpbpwbwrbwrwffzzfgzfgfcfzcffjdjjvrvnnfmmtztffsggjcjzcjcssscnscnssmmwgwbbljlnjndnrrqwqjjjbnnmbmcmbcmbbvvmtvmmfcmcjcdcnnzfzfzqfzfvvmbvmmndnbnsnnlddqvvsnngvnnrttfbtbqqnwqqzfzfzccfmmgrrsbbhvvgjjhfhssjmmsjjzzbqblqlfqllwhlwwvvstvtfvttnncjjzcjcjrrsvrssmfsfczbrzrvscvmcmrjpzwhcqfrrzbljnmqlzbzqtmhrshlrjjpvhnsvtlhqggqwppsjpszmqwfqmlwbqzwcrggrvfbvztnflwvbrqcrqbcllswvsvhwjzpldgphwptfdnlgdlnbttjfzrdcfvpdhlssfsljvdjmwddbnrpqnnqlfdfdspbnjwqjwrgtnrftsqcfjpmqwgwhttggjwzvgbwlhmtmmjlwhssrgshzpbcnstzlqdshdhjfgqlsmqqhpwbscsjhfbhprvhmftqngjgdbcvfldqgqsjqjfdmcvsflwzflsjfssnjpbwffnsfcnrdsphbjpgghmcthgnzmpgppqjdvbztvhnwqzndntcpjdtwwhvsmgdcthpssszrqcbntgsznpghmbqddpqscntjprlwzhbzhjtwzbwwcldwdgsttzmtnstjnngzrgvhncdbgqnllfzbthldztsdwsngjzprbvrnbzrsghlgssbqfnbvhnhzwmmmtncvsdngdtwcbjlnnzbnlrnmrvnvsjnvzdqnggmsvljlvjznwdszcmblhrsjvczpnlhsmqjsmwhbjbplbtqsgqjdllhncwdgbvzwnmqvndcbfhnvtjnzmvjhwzvdldhgfwbqqzcnbflfnwntlhmqgdhmrgwqcpmsvfbmwhbtsbdlhcnbcbswvdfffgjvddrbpzpcwsrsjnfvmzhlvbdnwttnqrmzbnnntbfvptrlhjhwjcsbnhvtwtwzvgfnzjplthqjbsjjwzdtqqvblnbvgcmvrmnvmwfrhcqgvrcjlfzdlpbfvncbtfgvnsflbjzqqhczcmtbwqmrppmptfgzvfbmcslwlfrfpvvnvvnwfvvmmdzmmtjsgqdfhngtphtlfjqrtljgnthgnbbqfrnpfmpwhpzdvzmtswwdvcnpsdcqwjdwlvbsbmlwdsjbcbgcrfljshlvpngfmsrzlfhtfqgwbcctnzzhnqhdmqzdwthftwtmpbcmqvdcdtgvltbzmszzwwmhzlfvbdqnhjqgdmstsnhftcwzvvbmnhwvgqzscwcdjbdgfmvpjdzctwqwltbwjlgcblnnhpnmggbmvqpqtgqjzspgqzvcvsdbvjgjfzdzhfpbzjqljjcgldzgnlmtjcmfgdbqgglvjqrppwmhccvqzvsrjjvfhjprwdsqsnszfprznljtcsrtqhcrpljfrccflmbpvqtzgmzhjrlbnrmmsmmjbtzwpglqgdvvvjvnfzmplsmvlvcnjshvjwntclwgpznnzwhjssgdcjbzrmsgnfgcgphrhfvrfhzwdcvsplhbmqwhpmjvqlmschznbqblvhtqfgtdggmncndhhplnzjphccjmlmtdqnmnlnpnfqdstljqnsqbrjrtspvrwvdmwzlgdmsfvctzgtmgqhqqrzpbgplzcfdqnzhsqrbcvhsccshnnpvvrpvqzqsgzgmpzfvvrrcvhdtntnsqnjrbzlbzmpgwdqzbhtlrrhbwdqjlsfgdhmvgmgbqhwvljmmqfllqvvrznrlftgzjdcgtstjffqmgvffpvtctzpdqjfnmlcdzscntctmqhrtmhrlhbjzttrcvcnlhsrvtpbmdchhntnnpnzlvqqnsrjcmblcvphqgwshnjmplgvnbsmmdzgqcpqztjhhgjvtlbpdpdwlwmmfrdgcvzfbgvbgpbjnwsssvhszwplcgvpgjwdrwngbcdjwvlsfhqlrqzgrzpfgjstqfdbrpqdvrlgdwqcsrgvhctznjjlzsmzctsqtfnhhlpjgnltssglmlwshfbrgmjqbvsmqwvszdfsvhmtrfjgwjctpsmgzzjbpwsztnnvzrhwvvmhdpgdmwzsjprhlgzcdvhznlfgjqvcwqrplcfvzmthsdsnrtfvnlrmvwplmbdvdggmlvpgdgzhvzmvzwmptzsnfrcrjspccmqjpjmhjqgrjbdcdjbzjmphmcdvjqtmdshhjrqgjgsnpzfbfgpjpczwzvmclgzgztlvzmdbwgncnndjwhhhjnhtjdmcnrmnqbmjdrdcmtvcsmftqcfhsvhsfjmtzjpnwffggpfqlqmzlbhnnhbtgzfgnjvdzmvthqjrhzbwvhcjzcsmsvsctrqbltpcrpjjnsbjdbfjqfcbpcgcwtqsflmlwprjcwlmcjjgsfdpwcqvhjpsgvdgsfnscnbzsrmrbbvdrlltzplbvgqsdnplcvbhddbtmwnfmvqhqdlrtrmrmzmhlccgwgmbdppjqdjtwmvdzfsbsggrfstjwjpjnljffwffmqncfnthnhglwvsgvzmgbzhtdfpfmdwmcldthvsnqnptpmhqctblgfsszhcfbvcrggjdhthqvvvlldshvqwmvdtfslrhzvgdfwztrczdjgcfcgtmwnphqthlgpfnrqwcgpzwnlgdvsnvzftlnlfflfsmjzhrhqjctsbvtccwbfsdrnbhszzjhqndvwcsmffnstnfdfwpbgfztjmjngdczzlgpscjtshpmmmzlnqndsttbdgfjqcvbqlphwhlhgcvjbhjmtrfzlgpwdnvzrllndbhvhlngvhlszzdcrdgvrmjwcvhhtbhnjmdzgctqnpdlrnqjzbchjtcsggsczlgmvtqvzmsqvtrhtvdmzlcdddfnbvbsnrzvgzfqjtbhjqhdznrhbfbqwtnwvrfqsznbqfzfzfgmhvjjsgbbdbdtzswwlnfrq\n"
```

## Part 1

```elixir
correct = 7

[pattern, start] =
  "mjqjpqmgbljsphdztnvjfqwrcgsmlb"
  |> String.trim()
  |> String.graphemes()
  |> Enum.with_index(1)
  |> Enum.chunk_every(4, 1, :discard)
  |> Enum.map(fn [{a1, _}, {a2, _}, {a3, _}, {a4, start}] ->
    [[a1, a2, a3, a4], start]
  end)
  |> Enum.filter(fn [items, _] -> length(Enum.uniq(items)) == 4 end)
  |> List.first()

IO.puts("Correct: #{correct}")
IO.puts("Actual: #{start}")
correct === start
```

<!-- livebook:{"output":true} -->

```
Correct: 7
Actual: 7
```

<!-- livebook:{"output":true} -->

```
true
```

```elixir
correct = 5

[pattern, start] =
  "bvwbjplbgvbhsrlpgdmjqwftvncz"
  |> String.trim()
  |> String.graphemes()
  |> Enum.with_index(1)
  |> Enum.chunk_every(4, 1, :discard)
  |> Enum.map(fn [{a1, _}, {a2, _}, {a3, _}, {a4, start}] ->
    [[a1, a2, a3, a4], start]
  end)
  |> Enum.filter(fn [items, _] -> length(Enum.uniq(items)) == 4 end)
  |> List.first()

IO.puts("Correct: #{correct}")
IO.puts("Actual: #{start}")
correct === start
```

<!-- livebook:{"output":true} -->

```
Correct: 5
Actual: 5
```

<!-- livebook:{"output":true} -->

```
true
```

```elixir
correct = 6

[pattern, start] =
  "nppdvjthqldpwncqszvftbrmjlhg"
  |> String.trim()
  |> String.graphemes()
  |> Enum.with_index(1)
  |> Enum.chunk_every(4, 1, :discard)
  |> Enum.map(fn [{a1, _}, {a2, _}, {a3, _}, {a4, start}] ->
    [[a1, a2, a3, a4], start]
  end)
  |> Enum.filter(fn [items, _] -> length(Enum.uniq(items)) == 4 end)
  |> List.first()

IO.puts("Correct: #{correct}")
IO.puts("Actual: #{start}")
correct === start
```

<!-- livebook:{"output":true} -->

```
Correct: 6
Actual: 6
```

<!-- livebook:{"output":true} -->

```
true
```

```elixir
correct = 10

[pattern, start] =
  "nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg"
  |> String.trim()
  |> String.graphemes()
  |> Enum.with_index(1)
  |> Enum.chunk_every(4, 1, :discard)
  |> Enum.map(fn [{a1, _}, {a2, _}, {a3, _}, {a4, start}] ->
    [[a1, a2, a3, a4], start]
  end)
  |> Enum.filter(fn [items, _] -> length(Enum.uniq(items)) == 4 end)
  |> List.first()

IO.puts("Correct: #{correct}")
IO.puts("Actual: #{start}")
correct === start
```

<!-- livebook:{"output":true} -->

```
Correct: 10
Actual: 10
```

<!-- livebook:{"output":true} -->

```
true
```

```elixir
correct = 11

[pattern, start] =
  "zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw"
  |> String.trim()
  |> String.graphemes()
  |> Enum.with_index(1)
  |> Enum.chunk_every(4, 1, :discard)
  |> Enum.map(fn [{a1, _}, {a2, _}, {a3, _}, {a4, start}] ->
    [[a1, a2, a3, a4], start]
  end)
  |> Enum.filter(fn [items, _] -> length(Enum.uniq(items)) == 4 end)
  |> List.first()

IO.puts("Correct: #{correct}")
IO.puts("Actual: #{start}")
correct === start
```

<!-- livebook:{"output":true} -->

```
Correct: 11
Actual: 11
```

<!-- livebook:{"output":true} -->

```
true
```

## Attempt - part 1

```elixir
correct = 1361

[pattern, start] =
  input
  |> String.trim()
  |> String.graphemes()
  |> Enum.with_index(1)
  |> Enum.chunk_every(4, 1, :discard)
  |> Enum.map(fn [{a1, _}, {a2, _}, {a3, _}, {a4, start}] ->
    [[a1, a2, a3, a4], start]
  end)
  |> Enum.filter(fn [items, _] -> length(Enum.uniq(items)) == 4 end)
  |> List.first()

IO.puts("Correct: #{correct}")
IO.puts("Actual: #{start}")
correct === start
```

<!-- livebook:{"output":true} -->

```
Correct: 1361
Actual: 1361
```

<!-- livebook:{"output":true} -->

```
true
```

## Intro - Part 2

Your device's communication system is correctly detecting packets, but still isn't working. It looks like it also needs to look for messages.

A start-of-message marker is just like a start-of-packet marker, except it consists of 14 distinct characters rather than 4.

Here are the first positions of start-of-message markers for all of the above examples:

* `mjqjpqmgbljsphdztnvjfqwrcgsmlb`: first marker after character `19`
* `bvwbjplbgvbhsrlpgdmjqwftvncz`: first marker after character `23`
* `nppdvjthqldpwncqszvftbrmjlhg`: first marker after character `23`
* `nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg`: first marker after character `29`
* `zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw`: first marker after character `26`

How many characters need to be processed before the first start-of-message marker is detected?

## Solution - Part 2

```elixir
correct = 19

[pattern, start] =
  "mjqjpqmgbljsphdztnvjfqwrcgsmlb"
  |> String.trim()
  |> String.graphemes()
  |> Enum.with_index(1)
  |> Enum.chunk_every(14, 1, :discard)
  |> Enum.map(fn [
                   {a1, _},
                   {a2, _},
                   {a3, _},
                   {a4, _},
                   {a5, _},
                   {a6, _},
                   {a7, _},
                   {a8, _},
                   {a9, _},
                   {a10, _},
                   {a11, _},
                   {a12, _},
                   {a13, _},
                   {a14, start}
                 ] ->
    [[a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14], start]
  end)
  |> Enum.filter(fn [items, _] -> length(Enum.uniq(items)) == 14 end)
  |> List.first()

IO.puts("Correct: #{correct}")
IO.puts("Actual: #{start}")
correct === start
```

<!-- livebook:{"output":true} -->

```
Correct: 19
Actual: 19
```

<!-- livebook:{"output":true} -->

```
true
```

```elixir
correct = 23

[pattern, start] =
  "bvwbjplbgvbhsrlpgdmjqwftvncz"
  |> String.trim()
  |> String.graphemes()
  |> Enum.with_index(1)
  |> Enum.chunk_every(14, 1, :discard)
  |> Enum.map(fn [
                   {a1, _},
                   {a2, _},
                   {a3, _},
                   {a4, _},
                   {a5, _},
                   {a6, _},
                   {a7, _},
                   {a8, _},
                   {a9, _},
                   {a10, _},
                   {a11, _},
                   {a12, _},
                   {a13, _},
                   {a14, start}
                 ] ->
    [[a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14], start]
  end)
  |> Enum.filter(fn [items, _] -> length(Enum.uniq(items)) == 14 end)
  |> List.first()

IO.puts("Correct: #{correct}")
IO.puts("Actual: #{start}")
correct === start
```

<!-- livebook:{"output":true} -->

```
Correct: 23
Actual: 23
```

<!-- livebook:{"output":true} -->

```
true
```

```elixir
correct = 23

[pattern, start] =
  "bvwbjplbgvbhsrlpgdmjqwftvncz"
  |> String.trim()
  |> String.graphemes()
  |> Enum.with_index(1)
  |> Enum.chunk_every(14, 1, :discard)
  |> Enum.map(fn [
                   {a1, _},
                   {a2, _},
                   {a3, _},
                   {a4, _},
                   {a5, _},
                   {a6, _},
                   {a7, _},
                   {a8, _},
                   {a9, _},
                   {a10, _},
                   {a11, _},
                   {a12, _},
                   {a13, _},
                   {a14, start}
                 ] ->
    [[a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14], start]
  end)
  |> Enum.filter(fn [items, _] -> length(Enum.uniq(items)) == 14 end)
  |> List.first()

IO.puts("Correct: #{correct}")
IO.puts("Actual: #{start}")
correct === start
```

<!-- livebook:{"output":true} -->

```
Correct: 23
Actual: 23
```

<!-- livebook:{"output":true} -->

```
true
```

```elixir
correct = 29

[pattern, start] =
  "nznrnfrfntjfmvfwmzdfjlvtqnbhcprsg"
  |> String.trim()
  |> String.graphemes()
  |> Enum.with_index(1)
  |> Enum.chunk_every(14, 1, :discard)
  |> Enum.map(fn [
                   {a1, _},
                   {a2, _},
                   {a3, _},
                   {a4, _},
                   {a5, _},
                   {a6, _},
                   {a7, _},
                   {a8, _},
                   {a9, _},
                   {a10, _},
                   {a11, _},
                   {a12, _},
                   {a13, _},
                   {a14, start}
                 ] ->
    [[a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14], start]
  end)
  |> Enum.filter(fn [items, _] -> length(Enum.uniq(items)) == 14 end)
  |> List.first()

IO.puts("Correct: #{correct}")
IO.puts("Actual: #{start}")
correct === start
```

<!-- livebook:{"output":true} -->

```
Correct: 29
Actual: 29
```

<!-- livebook:{"output":true} -->

```
true
```

```elixir
correct = 26

[pattern, start] =
  "zcfzfwzzqfrljwzlrfnpqdbhtmscgvjw"
  |> String.trim()
  |> String.graphemes()
  |> Enum.with_index(1)
  |> Enum.chunk_every(14, 1, :discard)
  |> Enum.map(fn [
                   {a1, _},
                   {a2, _},
                   {a3, _},
                   {a4, _},
                   {a5, _},
                   {a6, _},
                   {a7, _},
                   {a8, _},
                   {a9, _},
                   {a10, _},
                   {a11, _},
                   {a12, _},
                   {a13, _},
                   {a14, start}
                 ] ->
    [[a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14], start]
  end)
  |> Enum.filter(fn [items, _] -> length(Enum.uniq(items)) == 14 end)
  |> List.first()

IO.puts("Correct: #{correct}")
IO.puts("Actual: #{start}")
correct === start
```

<!-- livebook:{"output":true} -->

```
Correct: 26
Actual: 26
```

<!-- livebook:{"output":true} -->

```
true
```

## Attempt - part 2

```elixir
correct = 3263

[pattern, start] =
  input
  |> String.trim()
  |> String.graphemes()
  |> Enum.with_index(1)
  |> Enum.chunk_every(14, 1, :discard)
  |> Enum.map(fn [
                   {a1, _},
                   {a2, _},
                   {a3, _},
                   {a4, _},
                   {a5, _},
                   {a6, _},
                   {a7, _},
                   {a8, _},
                   {a9, _},
                   {a10, _},
                   {a11, _},
                   {a12, _},
                   {a13, _},
                   {a14, start}
                 ] ->
    [[a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14], start]
  end)
  |> Enum.filter(fn [items, _] -> length(Enum.uniq(items)) == 14 end)
  |> List.first()

IO.puts("Correct: #{correct}")
IO.puts("Actual: #{start}")
correct === start
```

<!-- livebook:{"output":true} -->

```
Correct: 3263
Actual: 3263
```

<!-- livebook:{"output":true} -->

```
true
```
