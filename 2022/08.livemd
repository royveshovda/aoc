<!-- livebook:{"persist_outputs":true} -->

# Day 08

## Intro

** Description of problem **

## Input

```elixir
input_test = """
30373
25512
65332
33549
35390
"""
```

<!-- livebook:{"output":true} -->

```
"30373\n25512\n65332\n33549\n35390\n"
```

```elixir
input = File.read!("input08.txt")
```

<!-- livebook:{"output":true} -->

```
"102212110110302230012132130441442043243242145112422525112333344240121120342411110001231112222021211\n222101001302011022124443303121322323142224235123233315215333545242421321241403143213333101310210211\n200201223122002022301310313414224443253123231515151513541254251131310343344222040320023211301320200\n200010213032223103230132143412204353411323525332513442523314324332413034422122304413120211230122212\n010211000332000340422300132032513533513115523254315325423242433353351244232123121111220123121333221\n200122303232310323111312343413321244422555551325423211253434511531321144403333313021201212232131220\n000212003210330240303442205443113542544534111314155152232435243131155352422402104202123433111201232\n103312101101443020314140255354241134315242455146454323625133153413235312512313332430221300331131100\n010220000301314241214335313133422432322123354664326463436444322422342554355225140334421002113133121\n323101132001123022243353315252233331435562622453564455524652525652244413142424222440021003003130221\n311311300011420441113315524451532135232526456634245324454325625255644144511435413342301130211231301\n122330114303143110342335214315243456332354435254662545365545352556636544332142113343020330142302023\n022120000403423231542555223312544433353262526636242665353354342624542223253541435144031113311431220\n210013131013443325232155555522255445233525524424425466462465252544334662211253135515414212121223103\n122130234323200111421534352526522446635243456643673475346653325362454362443421552412233011444032132\n330230413401024335441342264233664326224445367753634776764473243636265344556415445523524224043114211\n020342003212232435413445263654334245243765543345436537434453757662242253666363442422244144403424000\n200102231042423341434316352256242653765564636564563755363577363456266625662553514113422123403421132\n313204040243524231344465644555626363733665445433637447335677545646763646633226445435325125112213414\n314103222004445425153443435336445733737355475744355366644536666633436334423645665121453234041020422\n241224100115215322523535566553547766677645474354634357364574375657645546622424324323251244433440201\n022222042544545521533326245235374365344376774543443767376646565377535776236535264522124353322203234\n422222135434133533655352463473735556656745548755787857555356377355447565365456463664354434453044312\n304324242134435426624362552443745545463386458858447758455754543677463336472433462334512421444332223\n341414135242433442655442346556355346658767857767584647675766884536373667347366462552211223152411402\n322422011132511352664233364365653466744454566746588468655774844685736565337465223255264314431430230\n230422221453335454423325334433457458687888455486757548466746647544834643335672463455634151341522302\n234004552353522225535427357745555646855484747845567786675574858868655476475453443665223324353452113\n020135314133142653352266355334757758775757788848887684458858675874884637537467525625364253131211244\n414342423551254236456446367655347867476487576757978699668748774646468564677435372565356631415154301\n402224514555445234247373353744455587885585976595966767878796785855864485334466564262266452143444311\n322114434454542333646465444736668764744886688767569596959858556668754886535574755434322662442212133\n121324243324423343546763375477766585857886776859668579795978997478645686674366773535335522313423220\n133542124333622654643366436564658876577978579997657798669999767568447887467776367522435455533321443\n023413415133262422437473376558558855786797675666795779995686567865485584745545375742263662533555543\n141153353554563662677655657576756468676875598877958956899955978897446555748753563362626454221131125\n325353321363522257537756588466744857658697678559699997698595865765578845586445367745536633643312255\n423213544666625365635544655675458885666985859697786876896858858797786874566466456657466442525434421\n111454444524556247634754788885848856779676996689987686878899758967589455644666556534542332454425232\n113454234223324274556335586767549686998856766879779799897977886877798476548873366444323624534235512\n413111246643442463347377577668885588996599677886898888866767856868795965878475573774545255562121" <> ...
```

## Part 1

```elixir
defmodule Day08 do
  def at(trees, {x, y}) do
    row = Enum.at(trees, y)
    Enum.at(row, x)
  end

  def visible(_trees, {x, y}, {x_max, y_max}) when x == 0 or y == 0 or x == x_max or y == y_max do
    true
  end

  def visible(trees, {x, y} = p, {x_max, y_max} = m) do
    val = at(trees, p)

    v_left = visible_left(trees, p, m)
    v_right = visible_right(trees, p, m)
    v_down = visible_down(trees, p, m)
    v_up = visible_up(trees, p, m)

    # IO.puts("#{x}/#{y}: #{val} (L: #{v_left}, R: #{v_right}), U: #{v_up}, D: #{v_down}))")

    v_left or v_right or v_up or v_down
  end

  def visible_left(trees, {x, y} = p, {x_max, y_max}) do
    val = at(trees, p)

    for i <- 0..(x - 1) do
      {i, y}
    end
    |> Enum.map(fn j -> at(trees, j) end)
    |> Enum.all?(fn k -> k < val end)
  end

  def visible_right(trees, {x, y} = p, {x_max, _y_max}) do
    val = at(trees, p)

    for i <- (x + 1)..x_max do
      {i, y}
    end
    |> Enum.map(fn j -> at(trees, j) end)
    |> Enum.all?(fn k -> k < val end)
  end

  def visible_up(trees, {x, y} = p, {_x_max, y_max}) do
    val = at(trees, p)

    for i <- 0..(y - 1) do
      {x, i}
    end
    |> Enum.map(fn j -> at(trees, j) end)
    |> Enum.all?(fn k -> k < val end)
  end

  def visible_down(trees, {x, y} = p, {x_max, y_max}) do
    val = at(trees, p)

    for i <- (y + 1)..y_max do
      {x, i}
    end
    |> Enum.map(fn j -> at(trees, j) end)
    |> Enum.all?(fn k -> k < val end)
  end
end
```

<!-- livebook:{"output":true} -->

```
warning: variable "val" is unused (if the variable is not meant to be used, prefix it with an underscore)
  08.livemd#cell:key2pi5itcledo4uwkh2ulkz6nsow3us:12: Day08.visible/3

warning: variable "x" is unused (if the variable is not meant to be used, prefix it with an underscore)
  08.livemd#cell:key2pi5itcledo4uwkh2ulkz6nsow3us:11: Day08.visible/3

warning: variable "x_max" is unused (if the variable is not meant to be used, prefix it with an underscore)
  08.livemd#cell:key2pi5itcledo4uwkh2ulkz6nsow3us:11: Day08.visible/3

warning: variable "y" is unused (if the variable is not meant to be used, prefix it with an underscore)
  08.livemd#cell:key2pi5itcledo4uwkh2ulkz6nsow3us:11: Day08.visible/3

warning: variable "y_max" is unused (if the variable is not meant to be used, prefix it with an underscore)
  08.livemd#cell:key2pi5itcledo4uwkh2ulkz6nsow3us:11: Day08.visible/3

warning: variable "x_max" is unused (if the variable is not meant to be used, prefix it with an underscore)
  08.livemd#cell:key2pi5itcledo4uwkh2ulkz6nsow3us:24: Day08.visible_left/3

warning: variable "y_max" is unused (if the variable is not meant to be used, prefix it with an underscore)
  08.livemd#cell:key2pi5itcledo4uwkh2ulkz6nsow3us:24: Day08.visible_left/3

warning: variable "y_max" is unused (if the variable is not meant to be used, prefix it with an underscore)
  08.livemd#cell:key2pi5itcledo4uwkh2ulkz6nsow3us:42: Day08.visible_up/3

warning: variable "x_max" is unused (if the variable is not meant to be used, prefix it with an underscore)
  08.livemd#cell:key2pi5itcledo4uwkh2ulkz6nsow3us:51: Day08.visible_down/3

```

<!-- livebook:{"output":true} -->

```
{:module, Day08, <<70, 79, 82, 49, 0, 0, 22, ...>>, {:visible_down, 3}}
```

```elixir
trees =
  input_test
  |> String.split(["\n"], trim: true)
  |> Enum.map(fn x -> String.graphemes(x) |> Enum.map(fn y -> String.to_integer(y) end) end)

x_max = length(hd(trees)) - 1
y_max = length(trees) - 1

points =
  for y <- 0..y_max do
    for x <- 0..x_max do
      {x, y}
    end
  end
  |> List.flatten()
  |> Enum.map(fn p -> Day08.visible(trees, p, {x_max, y_max}) end)
  |> Enum.filter(fn x -> x == true end)
  |> Enum.count()
```

<!-- livebook:{"output":true} -->

```
21
```

```elixir
trees =
  input
  |> String.split(["\n"], trim: true)
  |> Enum.map(fn x -> String.graphemes(x) |> Enum.map(fn y -> String.to_integer(y) end) end)

x_max = length(hd(trees)) - 1
y_max = length(trees) - 1

points =
  for y <- 0..y_max do
    for x <- 0..x_max do
      {x, y}
    end
  end
  |> List.flatten()
  |> Enum.map(fn p -> Day08.visible(trees, p, {x_max, y_max}) end)
  |> Enum.filter(fn x -> x == true end)
  |> Enum.count()
```

<!-- livebook:{"output":true} -->

```
1843
```

Correct: 1843

## Intro - Part 2

** Intro part 2 **

## Solution - Part 2

```elixir

```
